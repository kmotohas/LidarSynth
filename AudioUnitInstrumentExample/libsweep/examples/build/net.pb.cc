// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net.proto

#include "net.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace sweep {
namespace proto {
class scanDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<scan>
      _instance;
} _scan_default_instance_;
}  // namespace proto
}  // namespace sweep
namespace protobuf_net_2eproto {
static void InitDefaultsscan() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sweep::proto::_scan_default_instance_;
    new (ptr) ::sweep::proto::scan();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sweep::proto::scan::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_scan =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscan}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_scan.base);
}

}  // namespace protobuf_net_2eproto
namespace sweep {
namespace proto {

// ===================================================================

void scan::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int scan::kAngleFieldNumber;
const int scan::kDistanceFieldNumber;
const int scan::kSignalStrengthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

scan::scan()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_net_2eproto::scc_info_scan.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sweep.proto.scan)
}
scan::scan(const scan& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      angle_(from.angle_),
      distance_(from.distance_),
      signal_strength_(from.signal_strength_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sweep.proto.scan)
}

void scan::SharedCtor() {
}

scan::~scan() {
  // @@protoc_insertion_point(destructor:sweep.proto.scan)
  SharedDtor();
}

void scan::SharedDtor() {
}

void scan::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const scan& scan::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_net_2eproto::scc_info_scan.base);
  return *internal_default_instance();
}


void scan::Clear() {
// @@protoc_insertion_point(message_clear_start:sweep.proto.scan)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  angle_.Clear();
  distance_.Clear();
  signal_strength_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool scan::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:sweep.proto.scan)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 angle = 1 [packed = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_angle())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 10u, input, this->mutable_angle())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 distance = 2 [packed = true];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_distance())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18u, input, this->mutable_distance())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 signal_strength = 3 [packed = true];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_signal_strength())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 26u, input, this->mutable_signal_strength())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sweep.proto.scan)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sweep.proto.scan)
  return false;
#undef DO_
}

void scan::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sweep.proto.scan)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 angle = 1 [packed = true];
  if (this->angle_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _angle_cached_byte_size_));
  }
  for (int i = 0, n = this->angle_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->angle(i), output);
  }

  // repeated int32 distance = 2 [packed = true];
  if (this->distance_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _distance_cached_byte_size_));
  }
  for (int i = 0, n = this->distance_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->distance(i), output);
  }

  // repeated int32 signal_strength = 3 [packed = true];
  if (this->signal_strength_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _signal_strength_cached_byte_size_));
  }
  for (int i = 0, n = this->signal_strength_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->signal_strength(i), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sweep.proto.scan)
}

size_t scan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sweep.proto.scan)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // repeated int32 angle = 1 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->angle_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _angle_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 distance = 2 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->distance_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _distance_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 signal_strength = 3 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->signal_strength_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _signal_strength_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void scan::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const scan*>(&from));
}

void scan::MergeFrom(const scan& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sweep.proto.scan)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  angle_.MergeFrom(from.angle_);
  distance_.MergeFrom(from.distance_);
  signal_strength_.MergeFrom(from.signal_strength_);
}

void scan::CopyFrom(const scan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sweep.proto.scan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool scan::IsInitialized() const {
  return true;
}

void scan::Swap(scan* other) {
  if (other == this) return;
  InternalSwap(other);
}
void scan::InternalSwap(scan* other) {
  using std::swap;
  angle_.InternalSwap(&other->angle_);
  distance_.InternalSwap(&other->distance_);
  signal_strength_.InternalSwap(&other->signal_strength_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string scan::GetTypeName() const {
  return "sweep.proto.scan";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace sweep
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sweep::proto::scan* Arena::CreateMaybeMessage< ::sweep::proto::scan >(Arena* arena) {
  return Arena::CreateInternal< ::sweep::proto::scan >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
